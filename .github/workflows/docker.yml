name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
    # Only build on PR to test the build, don't push
  workflow_dispatch:
    # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs
      id-token: write

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper git history

      # Step 2: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to GitHub Container Registry
      # Only login when not running on PR from a fork
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Extract Docker metadata (tags, labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags
            type=ref,event=branch
            # PR-based tags
            type=ref,event=pr
            # Tag-based tags
            type=ref,event=tag
            # Semantic version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=pdfkb-mcp
            org.opencontainers.image.description=PDF Knowledgebase MCP Server - Document search with vector embeddings
            org.opencontainers.image.source=https://github.com/juanqui/pdfkb-mcp
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.authors=Juan Villa <juanqui@villafam.com>

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PDFKB_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 6: Generate artifact attestation (for supply chain security)
      # Only when pushing to registry (not on PRs)
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      # Step 7: Output image details
      - name: Output image details
        run: |
          echo "üê≥ Docker image built successfully!"
          echo "üìã Image tags:"
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
          echo ""
          echo "üè∑Ô∏è  Image labels:"
          echo "${{ steps.meta.outputs.labels }}" | sed 's/^/  - /'
          echo ""
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "üöÄ Image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            echo "üíæ Image digest: ${{ steps.build.outputs.digest }}"
          else
            echo "‚ÑπÔ∏è  Image built but not pushed (pull request)"
          fi

      # Step 8: Update README with image info (only on main branch pushes)
      - name: Update container registry info
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üì¶ Latest container images available at:"
          echo "  - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
          echo "  - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main\`"
          echo ""
          echo "üèÉ‚Äç‚ôÇÔ∏è To run the latest image:"
          echo "\`\`\`bash"
          echo "podman run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "\`\`\`"
