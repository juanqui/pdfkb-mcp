name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Check package metadata
      run: |
        pip install twine
        twine check dist/*

    - name: Verify package version matches release tag
      run: |
        # Extract version from pyproject.toml
        PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        # Extract version from release tag (remove 'v' prefix if present)
        RELEASE_VERSION=${GITHUB_REF#refs/tags/}
        RELEASE_VERSION=${RELEASE_VERSION#v}

        echo "Package version: $PACKAGE_VERSION"
        echo "Release version: $RELEASE_VERSION"

        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "Error: Package version ($PACKAGE_VERSION) does not match release tag ($RELEASE_VERSION)"
          exit 1
        fi

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use API token as fallback if trusted publishing is not set up
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  test-install:
    runs-on: ubuntu-latest
    needs: publish
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for package to be available on PyPI
      run: |
        # Extract version from release tag
        RELEASE_VERSION=${GITHUB_REF#refs/tags/}
        RELEASE_VERSION=${RELEASE_VERSION#v}

        echo "Waiting for pdfkb-mcp==$RELEASE_VERSION to be available on PyPI..."

        # Wait up to 5 minutes for the package to be available
        for i in {1..30}; do
          if pip index versions pdfkb-mcp | grep -q "$RELEASE_VERSION"; then
            echo "Package pdfkb-mcp==$RELEASE_VERSION is available on PyPI"
            break
          fi
          echo "Attempt $i: Package not yet available, waiting 10 seconds..."
          sleep 10
        done

    - name: Test installation from PyPI
      run: |
        # Extract version from release tag
        RELEASE_VERSION=${GITHUB_REF#refs/tags/}
        RELEASE_VERSION=${RELEASE_VERSION#v}

        # Install the specific version from PyPI
        pip install pdfkb-mcp==$RELEASE_VERSION

        # Verify the installation
        python -c "import pdfkb; print(f'Successfully imported pdfkb version {pdfkb.__version__ if hasattr(pdfkb, \"__version__\") else \"unknown\"}')"

        # Test the CLI command if available
        pdfkb-mcp --help || echo "CLI help not available, but package installed successfully"
